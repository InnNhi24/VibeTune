name: VibeTune CI/CD Pipeline

permissions:
  contents: read
  security-events: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Backend Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./backend
      run: npm install
      
    - name: Run linting
      working-directory: ./backend
      run: npm run lint || echo "Linting not configured yet"
      
    - name: Run tests
      working-directory: ./backend
      run: npm test -- --passWithNoTests
      
    - name: Generate coverage report
      working-directory: ./backend
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Frontend Tests
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: ./frontend
      run: npm install
      
    - name: Run linting
      working-directory: ./frontend
      run: npm run lint || echo "Linting not configured yet"
      
    - name: Run tests
      working-directory: ./frontend
      run: npm test -- --passWithNoTests
      
    - name: Generate coverage report
      working-directory: ./frontend
      run: npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Build and Test
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install root dependencies
      run: npm install
      
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm install
      
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm install
      
    - name: Build backend
      working-directory: ./backend
      run: npm run build
      
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          backend/dist/
          frontend/build/

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Run Trivy vulnerability scanner
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s --
        ./bin/trivy fs --format sarif --output trivy-results.sarif .

    # Upload SARIF only when running on a push within the same repository (avoid fork PR upload errors)
    - name: Upload SARIF to Code Scanning
      if: ${{ github.event_name == 'push' && github.repository == github.event.repository.full_name }}
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    # Save SARIF as artifact so it's available for inspection even when upload is skipped
    - name: Save SARIF artifact
      if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: trivy-results
        path: trivy-results.sarif

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        
    - name: Deploy to Vercel (Staging)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        vercel-args: '--prod'
        github-comment: true
        github-deployment: false
      env:
        NODE_VERSION: 20
        PNPM_VERSION: 8

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        
    - name: Deploy to Vercel (Production)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
        vercel-args: '--prod'
        github-comment: true
        github-deployment: false
      env:
        NODE_VERSION: 20
        PNPM_VERSION: 8
        
    - name: Notify deployment success
      run: |
        echo "üöÄ VibeTune successfully deployed to production!"
        echo "üåê Production URL: https://vibetune.vercel.app"

  # Performance Test
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://vibetune-staging.vercel.app
        configPath: './.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
