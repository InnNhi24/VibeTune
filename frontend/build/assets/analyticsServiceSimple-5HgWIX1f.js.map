{"version":3,"file":"analyticsServiceSimple-5HgWIX1f.js","sources":["../../src/services/analyticsServiceSimple.ts"],"sourcesContent":["// Simple analytics service that only uses localStorage - no database writes\nexport interface AnalyticsEvent {\n  event_type: string;\n  metadata: Record<string, any>;\n  profile_id?: string;\n  created_at: string;\n  timestamp: number;\n}\n\nexport class SimpleAnalyticsService {\n  private static readonly STORAGE_KEY = 'vibetune_analytics_simple';\n  private static readonly MAX_EVENTS = 1000;\n\n  // Initialize analytics service (localStorage only)\n  static initialize() {\n    try {\n      console.log('✅ Analytics ready (localStorage)');\n      \n      // Delayed cleanup to avoid blocking startup\n      if (typeof window !== 'undefined') {\n        setTimeout(() => {\n          this.cleanupOldEvents().catch(console.warn);\n        }, 10000); // Much longer delay\n      }\n    } catch (error) {\n      console.warn('⚠️ Analytics init failed (non-critical):', error);\n    }\n  }\n\n  // Track an event (localStorage only)\n  static track(eventType: string, metadata: Record<string, any> = {}, profileId?: string) {\n    try {\n      const event: AnalyticsEvent = {\n        event_type: eventType,\n        metadata: {\n          ...metadata,\n          timestamp: Date.now(),\n          user_agent: typeof navigator !== 'undefined' ? navigator.userAgent : 'unknown',\n          url: typeof window !== 'undefined' ? window.location.href : 'unknown'\n        },\n        profile_id: profileId,\n        created_at: new Date().toISOString(),\n        timestamp: Date.now()\n      };\n\n      this.storeEvent(event);\n      console.log(`Analytics tracked: ${eventType}`, metadata);\n    } catch (error) {\n      console.warn('Failed to track analytics event:', error);\n    }\n  }\n\n  // Store event in localStorage\n  private static storeEvent(event: AnalyticsEvent) {\n    try {\n      if (typeof window === 'undefined' || !localStorage) {\n        return;\n      }\n\n      const existing = localStorage.getItem(this.STORAGE_KEY);\n      const events: AnalyticsEvent[] = existing ? JSON.parse(existing) : [];\n      \n      events.push(event);\n      \n      // Keep only last N events to prevent storage bloat\n      if (events.length > this.MAX_EVENTS) {\n        events.splice(0, events.length - this.MAX_EVENTS);\n      }\n      \n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(events));\n    } catch (error) {\n      console.warn('Failed to store analytics event:', error);\n    }\n  }\n\n  // Get stored events\n  static getStoredEvents(): AnalyticsEvent[] {\n    try {\n      if (typeof window === 'undefined' || !localStorage) {\n        return [];\n      }\n\n      const existing = localStorage.getItem(this.STORAGE_KEY);\n      return existing ? JSON.parse(existing) : [];\n    } catch (error) {\n      console.warn('Failed to get stored analytics events:', error);\n      return [];\n    }\n  }\n\n  // Clean up old events (keep only last 30 days)\n  private static cleanupOldEvents() {\n    try {\n      if (typeof window === 'undefined' || !localStorage) {\n        return;\n      }\n\n      const events = this.getStoredEvents();\n      const thirtyDaysAgo = Date.now() - (30 * 24 * 60 * 60 * 1000);\n      \n      const recentEvents = events.filter(event => event.timestamp > thirtyDaysAgo);\n      \n      if (recentEvents.length !== events.length) {\n        localStorage.setItem(this.STORAGE_KEY, JSON.stringify(recentEvents));\n        console.log(`Cleaned up ${events.length - recentEvents.length} old analytics events`);\n      }\n    } catch (error) {\n      console.warn('Failed to cleanup old analytics events:', error);\n    }\n  }\n\n  // Get analytics summary for user dashboard\n  static getUserAnalytics(profileId: string, days: number = 7) {\n    try {\n      const events = this.getStoredEvents();\n      const startTime = Date.now() - (days * 24 * 60 * 60 * 1000);\n      \n      // Filter events for this user and time period\n      const userEvents = events.filter(event => \n        event.profile_id === profileId && event.timestamp > startTime\n      );\n\n      // Process analytics data\n      const summary = {\n        total_events: userEvents.length,\n        session_count: 0,\n        practice_sessions: 0,\n        placement_tests: 0,\n        avg_prosody_score: 0,\n        most_active_topics: [] as string[],\n        daily_activity: {} as Record<string, number>\n      };\n\n      const sessionIds = new Set();\n      const prosodyScores: number[] = [];\n      const topics: Record<string, number> = {};\n      const dailyActivity: Record<string, number> = {};\n\n      userEvents.forEach(event => {\n        const date = new Date(event.created_at).toISOString().split('T')[0];\n        dailyActivity[date] = (dailyActivity[date] || 0) + 1;\n\n        if (event.metadata?.sessionId) {\n          sessionIds.add(event.metadata.sessionId);\n        }\n\n        if (event.event_type === 'practice_session_completed') {\n          summary.practice_sessions++;\n        }\n\n        if (event.event_type === 'placement_test_completed') {\n          summary.placement_tests++;\n        }\n\n        if (event.metadata?.prosodyScore) {\n          prosodyScores.push(event.metadata.prosodyScore);\n        }\n\n        if (event.metadata?.topic) {\n          topics[event.metadata.topic] = (topics[event.metadata.topic] || 0) + 1;\n        }\n      });\n\n      summary.session_count = sessionIds.size;\n      summary.avg_prosody_score = prosodyScores.length > 0 \n        ? Math.round(prosodyScores.reduce((a, b) => a + b, 0) / prosodyScores.length)\n        : 0;\n      summary.most_active_topics = Object.entries(topics)\n        .sort(([, a], [, b]) => b - a)\n        .slice(0, 5)\n        .map(([topic]) => topic);\n      summary.daily_activity = dailyActivity;\n\n      return { data: summary, error: null };\n    } catch (error) {\n      console.error('Failed to get user analytics:', error);\n      return { data: null, error };\n    }\n  }\n\n  // Common event tracking methods\n  static trackPageView(page: string, metadata: Record<string, any> = {}) {\n    this.track('page_view', { page, ...metadata });\n  }\n\n  static trackUserAction(action: string, metadata: Record<string, any> = {}) {\n    this.track('user_action', { action, ...metadata });\n  }\n\n  static trackPracticeSession(sessionData: {\n    topic: string;\n    duration: number;\n    messageCount: number;\n    prosodyScore?: number;\n  }) {\n    this.track('practice_session_completed', sessionData);\n  }\n\n  static trackPlacementTest(testData: {\n    score: number;\n    level: string;\n    duration: number;\n    questionsAnswered: number;\n  }) {\n    this.track('placement_test_completed', testData);\n  }\n\n  static trackError(error: string, context: Record<string, any> = {}) {\n    this.track('error', { error, ...context });\n  }\n\n  static trackPerformance(metric: string, value: number, metadata: Record<string, any> = {}) {\n    this.track('performance_metric', { metric, value, ...metadata });\n  }\n\n  // Clear all stored events (for debugging/privacy)\n  static clearAllEvents() {\n    try {\n      if (typeof window !== 'undefined' && localStorage) {\n        localStorage.removeItem(this.STORAGE_KEY);\n        console.log('All analytics events cleared');\n      }\n    } catch (error) {\n      console.warn('Failed to clear analytics events:', error);\n    }\n  }\n\n  // Export events for debugging\n  static exportEvents() {\n    try {\n      const events = this.getStoredEvents();\n      console.log('Analytics Events Export:', events);\n      return events;\n    } catch (error) {\n      console.warn('Failed to export analytics events:', error);\n      return [];\n    }\n  }\n}\n\n// Export as default for easy replacement\nexport { SimpleAnalyticsService as AnalyticsService };"],"names":["SimpleAnalyticsService","error","eventType","metadata","profileId","event","existing","events","thirtyDaysAgo","recentEvents","days","startTime","userEvents","summary","sessionIds","prosodyScores","topics","dailyActivity","_a","_b","_c","date","b","topic","page","action","sessionData","testData","context","metric","value","__publicField"],"mappings":"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"}